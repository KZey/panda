## Summary

The Pandastream Cloud service provides a REST API for managing the upload and encoding of your video assets. Requests to the API make use of the GET, POST, PUT and DELETE request methods. All responses are in JSON.

If you're implementing your own library for accessing the API, the [Panda gem](http://github.com/newbamboo/panda_gem) is a good starting point.

## Example flow of a video through Panda

[Animation of upload flow here]

1. A user on your site wants to upload a new video. You create a form on your site which includes the Flash file upload component.
1. The users selects a video file and submits the form, the Flash upload component hijacks the form and immediately sends the video file directly to Pandastream Cloud.
1. Panda verifies the upload and displays a progress bar as the file is uploaded.
1. Panda receives the file and the video is added to the encoding queue.
1. The Flash upload component is replaced with a hidden form field, containing the id of the new video in your Pandastream Cloud account.
1. The form is then submitted to its destination on your site.
1. Once the video has been encoded, Panda sends a second notification to your application.

## API Reference

All requests should be sent to api.pandastream.com. The exception to this rule is client file uploads which must be sent to upload.pandastream.com which is specially optimized for handling large file uploads.

### Videos

#### GET /videos.json

##### Example response

Array of videos in format described below for a single video.

#### GET /videos/_id_.json

##### Example response
    
    {
      "video_codec":"h264"
      "updated_at":"2009/10/13 19:11:26 +0100"
      "id":"d2a5e752-b823-11de-b3a7-001ec2b5c0e1"
      "extname":".mp4"
      "thumbnail_position":50
      "audio_codec":"aac"
      "state_update_url":"http://mypandasite.com/videos/$id/update"
      "height":240
      "fps":29
      "duration":14000
      "width":300
      "upload_redirect_url":"http://mypandasite.com/videos/$id/done"
      "original_filename":"test.mp4"
      "created_at":"2009/10/13 19:11:26 +0100"
    }

#### GET /videos/_id_/encodings.json

##### Example response

Array of encodings in format [described below](#) for a single encoding.

#### POST http://upload.pandastream.com/videos.json

##### Required parameters

    upload_key: Unique string generated by you (e.g. 32aa8390-b6f6-012a-2162-0017f22c2d49)
    upload_redirect_url: Url to 

##### Optional parameters

    iframe: true

##### Example responses

    Status: 200 OK
    
    --- 
    :video: 
      :id: a92fdd10-b6f6-012a-a860-0017f22c2d49
- - - 
    Status: 401 Unauthorized

### Display video upload form
#### GET upload.pandastream.com/videos/_id_/form (html only)

The page returned will contain a form to allow the user to upload a video with the corresponding id. It is suggested that this page is displayed in either an iframe or a popup window. Whilst uploading, a progress bar will keep the users informed of the upload.

Once completed, the user will be redirected to the "Upload redirect url" defined in your Panda config. If setting this is left blank the user will be redirected to a default thank you page.

### Upload video file
#### POST upload.pandastream.com/videos/_id_/upload.(html|yaml|xml)

It's recommended that you use the form described above (which submits to this resource), but if required (such as from within Flash) the file can be submitted directly.

##### Parameters

    file: The video file

##### Example responses

    Status: 200 OK

If the video id is not found the following status is returned.

    Status: 404 Not Found

When calling using either yaml or xml formats, there are several different error response which may be returned.

* **NoFileSubmitted**: No file parameter was submitted (check your form's html if you're not using the default Panda form)
* **FormatNotRecognised**: The video format is not supported or the video could not be read.
* **InternalServerError**: There was a internal error. This error will be logged and resolved as soon as possible.

All are returned in the following format.

    Status: 500
    
    ---
    :error: ErrorMessage

### Get details
#### GET api.pandastream.com/videos/_id_.json

Retrieve details for a specific video. Included in the response will be all of its encodings and their current statuses.

The status of a video may be one of the following: 
* **empty**: video has been created but the actual video file has yet to be uploaded
* **original**: video has had a file uploaded to it

The status of an encoding may be one of the following: 
* **queued**: video is waiting in queue for processing
* **processing**: the encoding is currently being encoded
* **success**: the encoding was successful
* **error**: there was an error encoding or handling the video

##### Example responses

    Status: 200 OK
    
    --- 
    :video: 
      :width: 320
      :duration: 15900
      :screenshot: bac01bf0-503a-012b-1406-123138002145.flv.jpg
      :original_filename: sneezing_panda.flv
      :height: 240
      :status: original
      :thumbnail: bac01bf0-503a-012b-1406-123138002145.flv_thumb.jpg
      :encodings: 
      - :video: 
          :encoded_at: 2008-08-19 16:35:53 +00:00
          :width: 320
          :duration: 15900
          :profile_title: Flash video SD
          :screenshot: c2e83ee0-503a-012b-1407-123138002145.flv.jpg
          :original_filename: sneezing_panda.flv
          :height: 240
          :status: success
          :thumbnail: c2e83ee0-503a-012b-1407-123138002145.flv_thumb.jpg
          :parent: bac01bf0-503a-012b-1406-123138002145
          :profile: 82d587f0-43cf-012b-13f4-123138002145
          :encoding_time: 10
          :filename: c2e83ee0-503a-012b-1407-123138002145.flv
          :id: c2e83ee0-503a-012b-1407-123138002145
      :filename: bac01bf0-503a-012b-1406-123138002145.flv
      :id: bac01bf0-503a-012b-1406-123138002145
- - -
    Status: 404 Not Found

## Callbacks

When the state of a video changes, Panda will notify your application with a callback. A POST request is made to the "State update url" defined in your Panda config (note that the $id part of this url will be replaced with the id of the video whose status has changed). The request will be attempted a maximum of 5 times, after which time it will be logged as an error and you will be notified (the max number of retries can be set in the Panda config).

### Example callback
#### POST http://mysite/videos/_id_/state

##### Parameters

    --- 
    :video: 
      :width: 320
      :duration: 15900
      :screenshot: bac01bf0-503a-012b-1406-123138002145.flv.jpg
      :original_filename: sneezing_panda.flv
      :height: 240
      :status: original
      :thumbnail: bac01bf0-503a-012b-1406-123138002145.flv_thumb.jpg
      :encodings: 
      - :video: 
          :encoded_at: 2008-08-19 16:35:53 +00:00
          :width: 320
          :duration: 15900
          :profile_title: Flash video SD
          :screenshot: c2e83ee0-503a-012b-1407-123138002145.flv.jpg
          :original_filename: sneezing_panda.flv
          :height: 240
          :status: success
          :thumbnail: c2e83ee0-503a-012b-1407-123138002145.flv_thumb.jpg
          :parent: bac01bf0-503a-012b-1406-123138002145
          :profile: 82d587f0-43cf-012b-13f4-123138002145
          :encoding_time: 10
          :filename: c2e83ee0-503a-012b-1407-123138002145.flv
          :id: c2e83ee0-503a-012b-1407-123138002145
      :filename: bac01bf0-503a-012b-1406-123138002145.flv
      :id: bac01bf0-503a-012b-1406-123138002145

##### Example responses

When sending a notification Panda will check the response status code, and if it's not a 200 the notification will be logged as a failed.

## API Errors

When there is an issue with a request, Pandastream Cloud will return the appropriate HTTP status code, along with a JSON object containing the `error` name and a `message`.

### 500 (Error with Pandastream Cloud)

When there is an internal error a 500 status will be returned along with additional information in the message. Whenever a 500 error occurs our technical team is notified of the issue and will investigate the root of the problem immediately. If your experience a recurring issue, please submit a support ticket to [pandastream.com/support](http://pandastream.com/support)

### 401 NotAuthorized

When the `signature` parameter of a request is not correct this the status code 401 and the following error will be returned. If you receive this error please ensure that you are constructing and encoding the `signature` parameter as described in the API Authentication section below.

##### Example response

    {"error" : "NotAuthorized", "message" : "Signatures do not match"}

### 404 RecordNotFound

A record with the `id` supplied could not be found.

##### Example response (example)

    {"error" : "RecordNotFound", "message" : "Couldn't find Record with ID=X"}

### 400 BadRequest

This error will be returned in two cases. Either because you have requested a response format that is not supported (currently only JSON is supported, so all urls must end in `.json`), or you have not submitted all of the required parameters to a method.

##### Example response (2 examples)

    {"error" : "BadRequest", "message" : "Currently only .json is supported as a format"}
    
    {"error" : "BadRequest", "message" : "All required parameters were not supplied: access_key, signature, timestamp"}

### 422 CannotDelete
#### Only applies to: DELETE /profiles/_id_.json

If you attempt to delete a Profile which has associated encodings, the following error will be returned. In most cases you may in fact wish to just disable the Profile so that uploaded videos are no longer encoded using it. This can be done by sending a PUT request to update the Profile, setting the `status` attribute to `disabled`.

##### Example response

    {"error" : "CannotDelete", "message" : "Couldn't delete Profile with ID=X as it has associated encodings which must be deleted first. Maybe you want to disable the Profile instead by updating its status attribute to 'disabled'?"}

### 422 FormatNotRecognised
#### Only applies to: POST /videos.json

When the a video is uploaded it is first verified to ensure it is a valid video file. If the video file does not contain a recognized video format or has a duration of 0 (also a sign the format isn't recognized) this error will be returned.

##### Example response (2 examples)

    {"error" : "FormatNotRecognised", "message" : "Video data in file not recognized"}
    
    {"error" : "FormatNotRecognised", "message" : "Video has a duration of 0"}



### 400 NoFileSubmitted
#### Only applies to: POST /videos.json

If no file is submitted when uploaded a video this error is returned.

##### Example response

    {"error" : "NoFileSubmitted", "message" : "No file was submitted"}

## API Authentication

The Pandastream Cloud API requires all requests must also be signed to ensure they are valid and authenticated. For GET and DELETE requests the additional parameters must be url encoded and added to the parameters in the url. When making a POST or PUT request they should be included in the usual parameters payload submitted.

The `access\_key` and `secret\_key` used to authenticate the request are provided when you sign up for your Pandastream Cloud account. Your keys can always be found by logging in to your account by visiting [account.pandastream.com](http://account.pandastream.com)

A correctly signed request contains the following additional parameters:

    access_key: Provided when you sign up for Pandastream Cloud
    timestamp: Current time in iso8601 format
    signature: HMAC signature generated as described below

The `signature` is generated using the following method:

1. Create a `canonical\_querystring` by url encoding all of the parameters and the values, and joining them into one string using the `=` character to separate keys and their values, and the `&` character to separate the key value pairs. 

A typical `canonical\_querystring` might look as follows: `account_key=85f8dbe6-b998-11de-82e1-001ec2b5c0e1&timestamp=2009-10-15T15%3A38%3A42%2B01%3A00` ... other parameters such as those in the POST request would also be added to this string.

2. Construct the `string\_to\_sign` by concatenating the HTTP verb (GET, POST, PUT or DELETE), hostname (api.pandastream.com or upload.pandastream.com), request uri (e.g. /videos.json) and `canonical\_querystring` with newlines (\\n).

An example of a typical `string\_to\_sign`:

    GET
    api.pandastream.com
    /videos.json
    account_key=85f8dbe6-b998-11de-82e1-001ec2b5c0e1&timestamp=2009-10-15T15%3A38%3A42%2B01%3A00

3. Lastly, to generate the final `signature`, using **HMAC SHA256** encode the complete `string\_to\_sign` using your `secret\_key` as the key.