## Summary

The Pandastream Cloud service provides a REST API for managing the upload and encoding of your video assets. Requests to the API make use of the GET, POST, PUT and DELETE request methods. All responses are in JSON.

If you're implementing your own library for accessing the API, the [Panda gem](http://github.com/newbamboo/panda_gem) is a good starting point.

## Example flow of a video through Panda

[Animation of upload flow here]

1. A user on your site wants to upload a new video. You create a form on your site which includes the Flash file upload component.
1. The users selects a video file and submits the form, the Flash upload component hijacks the form and immediately sends the video file directly to Pandastream Cloud.
1. Panda verifies the upload and displays a progress bar as the file is uploaded.
1. Panda receives the file and the video is added to the encoding queue.
1. The Flash upload component is replaced with a hidden form field, containing the id of the new video in your Pandastream Cloud account.
1. The form is then submitted to its destination on your site.
1. Once the video has been encoded, Panda sends a second notification to your application.

## API Reference

All requests should be sent to api.pandastream.com. The exception to this rule is client file uploads which must be sent to upload.pandastream.com which is specially optimized for handling large file uploads.

### Videos

#### GET /videos.json

##### Example request

    GET /videos.json

##### Example response

    [{
      "id":"d2a5e752-b823-11de-b3a7-001ec2b5c0e1",
      "original_filename":"test.mp4",
      "extname":".mp4",
      "video_codec":"h264",
      "audio_codec":"aac",
      "thumbnail_position":50,
      "height":240,
      "width":300,
      "fps":29,
      "duration":14000,
      "state_update_url":"http://mypandasite.com/videos/update?id=$id",
      "upload_redirect_url":"http://mypandasite.com/videos/done?id=$id&error=$error&error_message=$error_message",
      "created_at":"2009/10/13 19:11:26 +0100",
      "updated_at":"2009/10/13 19:11:26 +0100"
    }, ... ]

#### GET /videos/_id_.json

##### Example request

    GET /videos/d2a5e752-b823-11de-b3a7-001ec2b5c0e1.json

##### Example response
    
    {
      "id":"d2a5e752-b823-11de-b3a7-001ec2b5c0e1",
      "original_filename":"test.mp4",
      "extname":".mp4",
      "video_codec":"h264",
      "audio_codec":"aac",
      "thumbnail_position":50,
      "height":240,
      "width":300,
      "fps":29,
      "duration":14000,
      "state_update_url":"http://mypandasite.com/videos/update?id=$id",
      "upload_redirect_url":"http://mypandasite.com/videos/done?id=$id&error=$error&error_message=$error_message",
      "created_at":"2009/10/13 19:11:26 +0100",
      "updated_at":"2009/10/13 19:11:26 +0100"
    }

#### GET /videos/_id_/encodings.json

##### Example request

    GET /videos/d2a5e752-b823-11de-b3a7-001ec2b5c0e1/encodings.json

##### Example response

    [{
       "id":"28d1bfe0-b83b-11de-8ef7-1231390084f5",
       "video_id":"d2a5e752-b823-11de-b3a7-001ec2b5c0e1",
       "profile_id":"173a928e-b83b-11de-9363-1231390084f5",
       "status":"success",
       "extname":".mp4",
       "encoding_progress":99,
       "height":240,
       "width":300,
       "started_encoding_at":"2009/10/13 21:28:45 +0000",
       "encoding_time":9000,
       "created_at":"2009/10/13 20:58:29 +0000",
       "updated_at":"2009/10/13 21:30:34 +0000",
    }, ... ]

#### POST http://upload.pandastream.com/videos.json

The following upload method is primarily for the use of uploaded clients such as Flash which are able to interpret the returned JSON before displaying any response to the user.

Note that when creating the [authorisation signature]() for this request **do not** include the file parameter.

##### Required parameters

    file: The file upload
    upload_key: Unique string generated by you (e.g. 32aa8390-b6f6-012a-2162-0017f22c2d49)
    state_update_url: Url to request notify the client of progress. See the section [Client Notifications](#) for more details about how this works.

##### Example request

    POST http://upload.pandastream.com/videos

    file: The file upload
    upload_key: bad51d98-bcdb-11de-8d0e-00254bb33798
    state_update_url: http://mypandasite.com/videos/update?id=$id

##### Example response

    {
      "id":"d2a5e752-b823-11de-b3a7-001ec2b5c0e1",
      "original_filename":"test.mp4",
      "extname":".mp4",
      "video_codec":"h264",
      "audio_codec":"aac",
      "thumbnail_position":50,
      "height":240,
      "width":300,
      "fps":29,
      "duration":14000,
      "state_update_url":"http://mypandasite.com/videos/$id/update",
      "upload_redirect_url":"",
      "created_at":"2009/10/13 19:11:26 +0100",
      "updated_at":"2009/10/13 19:11:26 +0100"
    }

#### POST http://upload.pandastream.com/videos

If you wish to use a traditional HTML form to upload the video, instead of returning JSON, this method will redirect the user to the `upload_redirect_url` with the response so you are able to display a friendly response to the user.

Using this method is covered in detail under the [Uploading using HTML forms](#) section.

Note that when creating the [authorisation signature]() for this request **do not** include the file parameter.

##### Required parameters

    file: The file upload
    upload_key: Unique string generated by you (e.g. 32aa8390-b6f6-012a-2162-0017f22c2d49)
    state_update_url: Url to request notify the client of progress. See the section [Client Notifications](#) for more details about how this works.
    upload_redirect_url: Url to redirect the user to when the upload is compelete. The result of the upload (including any error messages) will be included in the url.

##### Example request

    POST http://upload.pandastream.com/videos

    file: The file upload
    upload_key: bad51d98-bcdb-11de-8d0e-00254bb33798
    state_update_url: http://mypandasite.com/videos/update?id=$id
    upload_redirect_url: http://mypandasite.com/videos/done?id=$id&error=$error&error_message=$error_message

##### Example response

    Status: 307 Temporary Redirect
		Location: http://mypandasite.com/videos/done?id=5e210228-bcd7-11de-af63-00254bb33798&error=FormatNotRecognised&error_message=Video+data+in+file+not+recognized


#### DELETE /videos/_id_.json

##### Example request

    DELETE /videos/d2a5e752-b823-11de-b3a7-001ec2b5c0e1.json

##### Example response

    Status: 200

#### PUT /videos/_id_.json

Update the upload_redirect_url, state_update_url or thumbnail_position of a video.

##### Optional parameters

    upload_redirect_url
    state_update_url
    thumbnail_position

##### Example request

    PUT /videos/d2a5e752-b823-11de-b3a7-001ec2b5c0e1.json

    state_update_url: http://anothersite.com/videos/update?id=$id
    upload_redirect_url: http://anothersite.com/videos/done?id=$id&error=$error&error_message=$error_message
    thumbnail_position: 25
		

##### Example response

    {
      "id":"d2a5e752-b823-11de-b3a7-001ec2b5c0e1",
      "original_filename":"test.mp4",
      "extname":".mp4",
      "video_codec":"h264",
      "audio_codec":"aac",
      "thumbnail_position":25,
      "height":240,
      "width":300,
      "fps":29,
      "duration":14000,
      "state_update_url":"http://anothersite.com/videos/update?id=$id",
      "upload_redirect_url":"http://anothersite.com/videos/done?id=$id&error=$error&error_message=$error_message",
      "created_at":"2009/10/13 19:11:26 +0100",
      "updated_at":"2009/10/13 19:11:26 +0100"
    }

### Encodings

#### GET /encodings.json

##### Optional parameters

    status: queued, assigned, encoding, success or error

##### Example request

    GET /encoding.json?status=success

##### Example response

    [{
		   "id":"28d1bfe0-b83b-11de-8ef7-1231390084f5",
		   "video_id":"d2a5e752-b823-11de-b3a7-001ec2b5c0e1",
		   "profile_id":"173a928e-b83b-11de-9363-1231390084f5",
		   "status":"success",
		   "extname":".mp4",
		   "encoding_progress":99,
		   "height":240,
		   "width":300,
		   "started_encoding_at":"2009/10/13 21:28:45 +0000",
		   "encoding_time":9000,
		   "created_at":"2009/10/13 20:58:29 +0000",
		   "updated_at":"2009/10/13 21:30:34 +0000",
		}, ... ]

#### GET /encodings/_id_.json

##### Example request

    GET /encodings/28d1bfe0-b83b-11de-8ef7-1231390084f5.json

##### Example response

    {
      "id":"28d1bfe0-b83b-11de-8ef7-1231390084f5",
      "video_id":"d2a5e752-b823-11de-b3a7-001ec2b5c0e1",
      "profile_id":"173a928e-b83b-11de-9363-1231390084f5",
      "status":"success",
      "extname":".mp4",
      "encoding_progress":99,
      "height":240,
      "width":300,
      "started_encoding_at":"2009/10/13 21:28:45 +0000",
      "encoding_time":9000,
      "created_at":"2009/10/13 20:58:29 +0000",
      "updated_at":"2009/10/13 21:30:34 +0000",
    }

#### POST /encodings.json

Create a new encoding for a video that already exists.

##### Required parameters

    video_id: ID of existing video
    profile_id: ID of existing profile

##### Example request

    POST /encodings.json
    
    video_id: d2a5e752-b823-11de-b3a7-001ec2b5c0e1
    profile_id: 173a928e-b83b-11de-9363-1231390084f5

##### Example response

    {
      "id":"28d1bfe0-b83b-11de-8ef7-1231390084f5",
      "video_id":"d2a5e752-b823-11de-b3a7-001ec2b5c0e1",
      "profile_id":"173a928e-b83b-11de-9363-1231390084f5",
      "status":"queued",
      "extname":".mp4",
      "encoding_progress":0,
      "height":240,
      "width":300,
      "started_encoding_at":"",
      "encoding_time":0,
      "created_at":"2009/10/13 20:58:29 +0000",
      "updated_at":"2009/10/13 21:30:34 +0000",
    }

#### DELETE /encodings/_id_.json

##### Example request

    DELETE /encodings/28d1bfe0-b83b-11de-8ef7-1231390084f5.json

##### Example response

    Status: 200

### Profiles

#### GET /profiles.json

##### Example request

    GET /profile.json

##### Example response

    [{
       "id":"7db13594-b8f0-11de-a335-1231390084f5",
       "title":"Flash FLV (Medium)",
       "category":"flash",
       "extname":".flv",
       "width":320,
       "height":240,
       "command":"ffmpeg -i $input_file$ -ar 22050 -ab 64k -f flv -b 256k $resolution_and_padding$ -y $output_file$\nflvtool2 -U $output_file$",
       "created_at":"2009/10/14 18:36:30 +0000",
       "updated_at":"2009/10/14 19:38:42 +0000"
		}, ... ]

#### GET /profiles/_id_.json

##### Example request

    GET /profiles/7db13594-b8f0-11de-a335-1231390084f5.json

##### Example response

    {
      "id":"7db13594-b8f0-11de-a335-1231390084f5",
      "title":"Flash FLV (Medium)",
      "category":"flash",
      "extname":".flv",
      "width":320,
      "height":240,
      "command":"ffmpeg -i $input_file$ -ar 22050 -ab 64k -f flv -b 256k $resolution_and_padding$ -y $output_file$\nflvtool2 -U $output_file$",
      "created_at":"2009/10/14 18:36:30 +0000",
      "updated_at":"2009/10/14 19:38:42 +0000"
    }

#### POST /profiles.json

###### Optional parameters

    title
    category
    extname
    width
    height
    command

##### Example request

    POST /profiles.json

    title: My custom profile
    category: desktop
    extname: .mp4
    width: 320,
    height: 240,
    command: ffmpeg -i $input_file$ -f mp4 -b 128k $resolution_and_padding$ -y $output_file$

##### Example response

    {
      "id":"7db13594-b8f0-11de-a335-1231390084f5",
      "title":"My custom profile",
      "category":"desktop",
      "extname":".mp4",
      "width":320,
      "height":240,
      "command":"ffmpeg -i $input_file$ -f mp4 -b 128k $resolution_and_padding$ -y $output_file$",
      "created_at":"2009/10/14 18:36:30 +0000",
      "updated_at":"2009/10/14 19:38:42 +0000"
    }

#### PUT /profiles/_id_.json

###### Optional parameters

    title
    category
    extname
    width
    height
    command

##### Example request

    POST /profiles/7db13594-b8f0-11de-a335-1231390084f5.json

    title: The best custom profile

##### Example response

    {
      "id":"7db13594-b8f0-11de-a335-1231390084f5",
      "title":"The best custom profile",
      "category":"desktop",
      "extname":".mp4",
      "width":320,
      "height":240,
      "command":"ffmpeg -i $input_file$ -f mp4 -b 128k $resolution_and_padding$ -y $output_file$",
      "created_at":"2009/10/14 18:36:30 +0000",
      "updated_at":"2009/10/14 19:38:42 +0000"
    }

#### DELETE /profiles/_id_.json

##### Example request

    DELETE /profiles/7db13594-b8f0-11de-a335-1231390084f5.json

##### Example response

    Status: 200



## API Errors

When there is an issue with a request, Pandastream Cloud will return the appropriate HTTP status code, along with a JSON object containing the `error` name and a `message`.

### 500 (Error with Pandastream Cloud)

When there is an internal error a 500 status will be returned along with additional information in the message. Whenever a 500 error occurs our technical team is notified of the issue and will investigate the root of the problem immediately. If your experience a recurring issue, please submit a support ticket to [pandastream.com/support](http://pandastream.com/support)

### 401 NotAuthorized

When the `signature` parameter of a request is not correct this the status code 401 and the following error will be returned. If you receive this error please ensure that you are constructing and encoding the `signature` parameter as described in the API Authentication section below.

##### Example response

    {"error" : "NotAuthorized", "message" : "Signatures do not match"}

### 404 RecordNotFound

A record with the `id` supplied could not be found.

##### Example response (example)

    {"error" : "RecordNotFound", "message" : "Couldn't find Record with ID=X"}

### 400 BadRequest

This error will be returned in two cases. Either because you have requested a response format that is not supported (currently only JSON is supported, so all urls must end in `.json`), or you have not submitted all of the required parameters to a method.

##### Example response (2 examples)

    {"error" : "BadRequest", "message" : "Currently only .json is supported as a format"}
    
    {"error" : "BadRequest", "message" : "All required parameters were not supplied: access_key, signature, timestamp"}

### 422 CannotDelete
#### Only applies to: DELETE /profiles/_id_.json

If you attempt to delete a Profile which has associated encodings, the following error will be returned. In most cases you may in fact wish to just disable the Profile so that uploaded videos are no longer encoded using it. This can be done by sending a PUT request to update the Profile, setting the `status` attribute to `disabled`.

##### Example response

    {"error" : "CannotDelete", "message" : "Couldn't delete Profile with ID=X as it has associated encodings which must be deleted first. Maybe you want to disable the Profile instead by updating its status attribute to 'disabled'?"}

### 422 FormatNotRecognised
#### Only applies to: POST /videos.json

When the a video is uploaded it is first verified to ensure it is a valid video file. If the video file does not contain a recognized video format or has a duration of 0 (also a sign the format isn't recognized) this error will be returned.

##### Example response (2 examples)

    {"error" : "FormatNotRecognised", "message" : "Video data in file not recognized"}
    
    {"error" : "FormatNotRecognised", "message" : "Video has a duration of 0"}

### 400 NoFileSubmitted
#### Only applies to: POST /videos.json

If no file is submitted when uploaded a video this error is returned.

##### Example response

    {"error" : "NoFileSubmitted", "message" : "No file was submitted"}

## Uploading using HTML forms

The Flash uploader using SWFUpload make it easy to rapidly integrate you site with Pandastream, However there is a 100Mb upload limit in Flash. To support larger uploads you can implement uploads via a traditional HTML form. To ensure your users still have a great experience, we support fetching of the upload and encoding progress via Ajax so functionality is comparable to that of the flash uploader.

TODO...

### Creating the Form

You will need to include change the action attribute of the form tag to include the X-Progress-ID parameter so Pandastream tracks the file's upload progress. The UPLOAD_KEY should be the same unique string you already use in the form. Typically the form action would be as follows.

    http://upload.pandastream.com/videos?X-Progress-ID=UPLOAD_KEY

TODO... (remember to include X-Progress-ID when making the signature)

upload_redirect_url:

    http://mypandasite.com/videos/done?id=$id&error=$error&error_message=$error_message

Once iframe has redirected to that url we can get out to the parent, add the video ip in the parent form and enable its submit button.

## API Authentication

The Pandastream Cloud API requires all requests must also be signed to ensure they are valid and authenticated. For GET and DELETE requests the additional parameters must be url encoded and added to the parameters in the url. When making a POST or PUT request they should be included in the usual parameters payload submitted.

The `access\_key` and `secret\_key` used to authenticate the request are provided when you sign up for your Pandastream Cloud account. Your keys can always be found by logging in to your account by visiting [account.pandastream.com](http://account.pandastream.com)

A correctly signed request contains the following additional parameters:

    access_key: Provided when you sign up for Pandastream Cloud
    timestamp: Current time in iso8601 format
    signature: HMAC signature generated as described below

The `signature` is generated using the following method:

1. Create a `canonical\_querystring` by url encoding all of the parameters and the values, and joining them into one string using the `=` character to separate keys and their values, and the `&` character to separate the key value pairs. 

A typical `canonical\_querystring` might look as follows: `account_key=85f8dbe6-b998-11de-82e1-001ec2b5c0e1&timestamp=2009-10-15T15%3A38%3A42%2B01%3A00` ... other parameters such as those in the POST request would also be added to this string.

2. Construct the `string\_to\_sign` by concatenating the HTTP verb (GET, POST, PUT or DELETE), hostname (api.pandastream.com or upload.pandastream.com), request uri (e.g. /videos.json) and `canonical\_querystring` with newlines (\\n).

An example of a typical `string\_to\_sign`:

    GET
    api.pandastream.com
    /videos.json
    account_key=85f8dbe6-b998-11de-82e1-001ec2b5c0e1&timestamp=2009-10-15T15%3A38%3A42%2B01%3A00

3. Lastly, to generate the final `signature`, using **HMAC SHA256** encode the complete `string\_to\_sign` using your `secret\_key` as the key.